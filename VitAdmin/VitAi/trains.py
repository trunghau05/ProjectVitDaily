import json
import re
import time
import requests
from google import genai
from .utils import *

client = genai.Client(api_key="AIzaSyD09X-xh9HkghMk4eImIHXrqPw9Uy5hcIA") 

PROMPTS = {
    "summary": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot h·ªó tr·ª£ qu·∫£n l√Ω ghi ch√∫ v√† c√¥ng vi·ªác. "
        "C√≥ th·ªÉ th√™m c√°c ki·∫øn th·ª©c chuy√™n s√¢u c√≥ li√™n quan ƒë·ªÉ ng∆∞·ªùi d√πng n·∫Øm b·∫Øt. "
        "Ng∆∞·ªùi d√πng mu·ªën t√≥m t·∫Øt n·ªôi dung. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, r√µ r√†ng, d·ªÖ hi·ªÉu, gi·ªëng ng∆∞·ªùi nh·∫•t. "
        "Kh√¥ng s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫∑t bi·ªát v√†o c√¢u tr·∫£ l·ªùi nh∆∞: **,*,#,$ m√† thay v√†o ƒë√≥ d√πng c√°c d·∫•u - v√† + ƒë·ªÉ th·ªÉ hi·ªán √Ω cha v√† con, nh·ªõ c√°ch d√≤ng ƒë·ªÉ d·ªÖ nh√¨n ."
        "T√≥m t·∫Øt c√°c √Ω ch√≠nh c·ªßa ghi ch√∫ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong JSON sau:\n{data}"
    ),
    "search": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot h·ªó tr·ª£ qu·∫£n l√Ω ghi ch√∫ v√† c√¥ng vi·ªác. "
        "Ng∆∞·ªùi d√πng mu·ªën t√¨m ghi ch√∫ theo t·ª´ kh√≥a '{query}'. "
        "Tr·∫£ l·ªùi t·ª± nhi√™n, vui t√≠nh, ƒë·ª´ng nh·∫Øc ƒë·∫øn vi·ªác ch·ªâ xu·∫•t JSON cho ng∆∞·ªùi d√πng nh∆∞ng ch·ªâ xu·∫•t ƒë√∫ng JSON c√°c ghi ch√∫ kh·ªõp:\n{data}"
    ),
    "detail": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot qu·∫£n l√Ω ghi ch√∫. "
        "Ng∆∞·ªùi d√πng mu·ªën xem chi ti·∫øt. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, m√¥ t·∫£ chi ti·∫øt nh∆∞ng r√µ r√†ng. "
        "JSON d·ªØ li·ªáu:\n{data}"
    ),
    "translate": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot qu·∫£n l√Ω ghi ch√∫. "
        "Ch·ªâ d·ªãch to√†n b·ªô ghi ch√∫ khi ng∆∞·ªùi d√πng y√™u c·∫ßu d·ªãch to√†n b·ªô danh s√°ch ghi ch√∫"
        "Ng∆∞·ªùi d√πng mu·ªën d·ªãch c√°c ghi ch√∫ theo id, theo ghi ch√∫ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, theo t·ª´ kh√≥a '{query}'. "
        "Ng∆∞·ªùi d√πng mu·ªën d·ªãch sang ti·∫øng Anh. Tr·∫£ l·ªùi t·ª± nhi√™n, vui t√≠nh, ƒë·ª´ng nh·∫Øc ƒë·∫øn vi·ªác ch·ªâ xu·∫•t JSON cho ng∆∞·ªùi d√πng nh∆∞ng ch·ªâ xu·∫•t ƒë√∫ng JSON c√°c ghi ch√∫ kh·ªõp, d∆∞·ªõi d·∫°ng JSON ƒë√£ d·ªãch:\n{data}"
    ),
    "analyze": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot qu·∫£n l√Ω ghi ch√∫. "
        "Ng∆∞·ªùi d√πng mu·ªën ph√¢n t√≠ch n·ªôi dung. Tr·∫£ l·ªùi t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát, n√™u c√°c √Ω ch√≠nh, "
        "g·ª£i √Ω b·ªï sung ho·∫∑c ch·ªânh s·ª≠a ph√π h·ª£p, gi·ªëng nh∆∞ ph√¢n t√≠ch c·ªßa m·ªôt ng∆∞·ªùi:\n{data}"
    ),
    "natural": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot h·ªó tr·ª£ qu·∫£n l√Ω ghi ch√∫ v√† c√¥ng vi·ªác. "
        "Ng∆∞·ªùi d√πng n√≥i: '{query}'. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán v√† ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh. "
        "Tr·∫£ l·ªùi d·∫°ng vƒÉn b·∫£n, kh√¥ng c√≥ k√Ω t·ª± g√¨ ƒë·∫∑t bi·ªát. "
        "Kh√¥ng s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫∑t bi·ªát v√†o c√¢u tr·∫£ l·ªùi nh∆∞: **,*,#,$ m√† thay v√†o ƒë√≥ d√πng c√°c d·∫•u - v√† + ƒë·ªÉ th·ªÉ hi·ªán √Ω cha v√† con, nh·ªõ c√°ch d√≤ng ƒë·ªÉ d·ªÖ nh√¨n ."
        "N·∫øu c·∫ßn, V·ªãt c√≥ th·ªÉ h·ªèi th√™m ƒë·ªÉ l√†m r√µ √Ω mu·ªën c·ªßa ng∆∞·ªùi d√πng."
        "Kh√¥ng th√™m k√Ω t·ª± ƒë·∫∑t bi·ªát nh∆∞ emoji"
    ),
    "create": (
        "B·∫°n l√† V·ªãt, m·ªôt chatbot qu·∫£n l√Ω ghi ch√∫. "
        "Ng∆∞·ªùi d√πng mu·ªën t·∫°o ghi ch√∫ m·ªõi v·ªõi n·ªôi dung: '{query}'. "
        "H√£y tr·∫£ v·ªÅ **ch·ªâ JSON** v·ªõi c√°c tr∆∞·ªùng ch√≠nh x√°c c·ªßa backend Django model Note: "
        "nt_title, nt_subtitle n·∫øu c√≥, nt_content, nt_img='', nt_pdf='', nt_date (YYYY-MM-DD), us_id='US001'. "
        "Kh√¥ng th√™m b√¨nh lu·∫≠n hay vƒÉn b·∫£n ngo√†i JSON. "
    )
}

INTENTS = {
    "summary": ["t√≥m t·∫Øt", "ng·∫Øn g·ªçn", "summary"],
    "search": ["t√¨m", "search", "tra c·ª©u", "l·∫•y"],
    "detail": ["chi ti·∫øt", "full", "ƒë·∫ßy ƒë·ªß"],
    "translate": ["d·ªãch", "translate", "english"],
    "analyze": ["ph√¢n t√≠ch", "analyze", "topic"],
    "create": ["t·∫°o", "t·∫°o m·ªõi", "create", "new note", "th√™m m·ªõi", "add", "th√™m ghi ch√∫", "t·∫°o ghi ch√∫"],
    "feedback": ["feedback", "sai", "kh√¥ng ƒë√∫ng", "nh·∫ßm", "g√≥p √Ω", "l·ªói", "ƒë·ª´ng", "kh√¥ng c·∫ßn", "b·ªè qua", "t·ª´ gi·ªù", "ƒë·ª´ng h·ªèi"],  
}

API_ENDPOINTS = {
    "summary": "http://127.0.0.1:8000/note/note-list/?us_id=US001",
    "search": "http://127.0.0.1:8000/note/note-list/?us_id=US001",
    "detail": "http://127.0.0.1:8000/note/note-list/?us_id=US001",
    "translate": "http://127.0.0.1:8000/note/note-list/?us_id=US001",
    "analyze": "http://127.0.0.1:8000/note/note-list/?us_id=US001",
    "create": "http://127.0.0.1:8000/note/add/",
}

def detect_intent(user_input: str):
    user_input_lower = user_input.lower().strip()
    for intent, keywords in INTENTS.items():
        if any(kw.lower() in user_input_lower for kw in keywords):
            return intent
    return "natural"

def call_gemini(prompt, retries=3, wait=3):
    for attempt in range(retries):
        try:
            response = client.models.generate_content(
                model="gemini-2.0-flash",
                contents=prompt
            )
            return response.text
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói server Gemini, th·ª≠ l·∫°i ({attempt+1}/{retries}) sau {wait}s...")
            time.sleep(wait)
    return "‚ùå Server Gemini qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau."

def run_ai(user_input: str):
    intent = detect_intent(user_input)
    result_text = ""
    history_context = get_last_user_input()  
    feedback_context = get_feedback_user_inputs() 
    user_input_with_context = ""

    if feedback_context:
        user_input_with_context += "\n".join(feedback_context) + "\n\n"

    if history_context:
        user_input_with_context += history_context + "\n\n"

    user_input_with_context += f"User m·ªõi: {user_input}"

    if intent in ["summary", "search", "detail", "translate", "analyze"]:
        api_url = API_ENDPOINTS[intent]
        try:
            resp = requests.get(api_url)
            data = resp.json()
        except Exception as e:
            result_text = f"‚ö†Ô∏è L·ªói khi g·ªçi API: {e}"
            save_history(user_input, intent, result_text)
            return result_text, intent

        prompt = PROMPTS[intent].format(
            data=json.dumps(data, ensure_ascii=False, indent=2),
            query=user_input_with_context
        )
        result_text = call_gemini(prompt)

    elif intent == "create":
        prompt = PROMPTS["create"].format(query=user_input_with_context)
        generated_json = call_gemini(prompt)

        generated_json_clean = generated_json.strip()
        if generated_json_clean.startswith("```"):
            generated_json_clean = "\n".join(generated_json_clean.split("\n")[1:-1])

        try:
            note_json = json.loads(generated_json_clean)
        except Exception as e:
            result_text = f"‚ùå L·ªói khi ph√¢n t√≠ch JSON t·ª´ Gemini: {e}\nGenerated text: {generated_json}"
            save_history(user_input, intent, result_text)
            return result_text, intent

        api_url = API_ENDPOINTS["create"]
        try:
            resp = requests.post(api_url, json=note_json)
            if resp.status_code in [200, 201]:
                result_text = f"‚úÖ Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng: {resp.json()}"
            else:
                result_text = f"‚ùå L·ªói khi t·∫°o ghi ch√∫, status_code={resp.status_code}, response={resp.text}"
        except Exception as e:
            result_text = f"‚ö†Ô∏è L·ªói khi g·ªçi API POST: {e}"

    else:  
        prompt = PROMPTS["natural"].format(query=user_input_with_context)
        result_text = call_gemini(prompt)

    save_feedback(user_input, intent, result_text)
    save_history(user_input, intent, result_text)

    return result_text, intent

def main():
    print("ü§ñ V·ªãt s·∫µn s√†ng! G√µ 'exit' ƒë·ªÉ tho√°t.\n")
    while True:
        user_input = input("B·∫°n: ")
        if user_input.lower() in ["exit", "quit", "bye"]:
            print("ü§ñ V·ªãt: T·∫°m bi·ªát nh√©!")
            break
        result, intent = run_ai(user_input)
        print(f"\n=== Intent: {intent} ===")
        print("V·ªãt:", result, "\n")

if __name__ == "__main__":
    main()
